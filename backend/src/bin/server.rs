use actix_web::{get, post, web, App, HttpResponse, HttpServer, Responder, http::header::ContentType};
use secrecy::{ExposeSecret, Secret};
use urlencoding::encode;
use rand::Rng;
use sha2::{Sha256, Digest};
use base64::{Engine as _, engine::{self, general_purpose}, alphabet};
use dotenv;

const CUSTOM_ENGINE: engine::GeneralPurpose =
    engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);

#[get("/")]
async fn hello(
    app_data: web::Data<YogaAppData>,
) -> impl Responder {
    // state_value a 66 character value, with letters and numbers
    let host_ip = "aquiles.local";
    let client_id = app_data.client_id.expose_secret();
    let mut generator = rand::thread_rng();
    let rando: u64 = generator.gen();
    let rando_string = rando.to_string();
    let oauth_code = encode(&rando_string);
    let mut hasher = Sha256::new();
    hasher.update(oauth_code.as_bytes());
    let hashed_oauth_code = hasher.finalize();
    let encoded = CUSTOM_ENGINE.encode(hashed_oauth_code);
    let code_challenge = encode(&encoded);
    let host_port = "3000";
    let login_uri = format!("http://{}:9011/oauth2/authorize?client_id={}&response_type=code&redirect_uri=http%3A%2F%2F{}%3A{}%2Foauth-redirect&code_challenge={}&code_challenge_method=S256",
host_ip, client_id, host_ip, host_port, code_challenge);

    // a(href=fusionAuthURL+'/oauth2/logout/?client_id='+clientId) Logout

    HttpResponse::Ok()
        .content_type(ContentType::html())
        .body(format!(
            r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title>Login</title>
</head>
<body>
Hello world! <a href={}>Login</a>
</body>
</html>"#,
            login_uri
        ))
}


#[post("/echo")]
async fn echo(req_body: String) -> impl Responder {
    HttpResponse::Ok().body(req_body)
}

async fn manual_hello() -> impl Responder {
    HttpResponse::Ok().body("Hey there!")
}

struct YogaAppData {
    // this is the id from the application registered with FusionAuth
    client_id: Secret<String>,
    // this is the secret generated by FusionAuth
    client_secret: Secret<String>,
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    dotenv::dotenv().ok();
    let client_id = dotenv::var("CLIENT_ID").unwrap().into();
    let client_secret = dotenv::var("CLIENT_SECRET").unwrap().into();
    let yoga_data = web::Data::new(YogaAppData { client_id, client_secret });
    HttpServer::new(move || {
        App::new()
            .service(hello)
            .service(echo)
            .route("/hey", web::get().to(manual_hello))
            .app_data(yoga_data.clone())
    })
    .bind(("127.0.0.1", 8080))?
    .run()
    .await
}

// http://127.0.0.1:8080/
